generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  passwordHash String?       @map("password_hash")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  profile      Profile?
  interactions Interaction[]
  recoScores   RecoScore[]

  @@map("users")
}

model Profile {
  id                  String   @id @default(cuid())
  userId              String   @unique @map("user_id")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredGenres     String[] @map("preferred_genres")
  preferredLanguages  String[] @map("preferred_languages")
  preferredProviders  String[] @map("preferred_providers")
  region              String   @default("US")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

enum TitleType {
  MOVIE
  SERIES
}

model Title {
  id               String              @id @default(cuid())
  tmdbId           Int                 @unique @map("tmdb_id")
  type             TitleType
  originalTitle    String              @map("original_title")
  localizedTitles  Json?               @map("localized_titles")
  languages        String[]
  genres           String[]
  overview         String?
  localizedOverviews Json?             @map("localized_overviews")
  posterPath       String?             @map("poster_path")
  backdropPath     String?             @map("backdrop_path")
  releaseDate      DateTime?           @map("release_date")
  runtime          Int?
  popularity       Float               @default(0)
  rating           Float               @default(0)
  voteCount        Int                 @default(0) @map("vote_count")
  originalLanguage String              @map("original_language")
  cast             Json?
  crew             Json?
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  availability     TitleAvailability[]
  interactions     Interaction[]
  embedding        Embedding?
  recoScores       RecoScore[]

  @@index([type])
  @@index([popularity])
  @@index([rating])
  @@index([releaseDate])
  @@map("titles")
}

enum MonetizationType {
  FLATRATE
  RENT
  BUY
  ADS
  FREE
}

model TitleAvailability {
  id                String           @id @default(cuid())
  titleId           String           @map("title_id")
  title             Title            @relation(fields: [titleId], references: [id], onDelete: Cascade)
  region            String
  providerId        Int              @map("provider_id")
  providerName      String           @map("provider_name")
  providerLogoPath  String?          @map("provider_logo_path")
  linkUrl           String?          @map("link_url")
  monetizationType  MonetizationType @map("monetization_type")
  lastCheckedAt     DateTime         @default(now()) @map("last_checked_at")

  @@unique([titleId, region, providerId, monetizationType])
  @@index([region])
  @@index([providerId])
  @@map("title_availability")
}

enum InteractionEvent {
  IMPRESSION
  CLICK
  LIKE
  SAVE
  START
  COMPLETE
}

model Interaction {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  titleId   String           @map("title_id")
  title     Title            @relation(fields: [titleId], references: [id], onDelete: Cascade)
  event     InteractionEvent
  score     Float            @default(0)
  metadata  Json?
  createdAt DateTime         @default(now()) @map("created_at")

  @@index([userId])
  @@index([titleId])
  @@index([event])
  @@index([createdAt])
  @@map("interactions")
}

model Embedding {
  id        String                     @id @default(cuid())
  titleId   String                     @unique @map("title_id")
  title     Title                      @relation(fields: [titleId], references: [id], onDelete: Cascade)
  vector    Unsupported("vector(384)")
  createdAt DateTime                   @default(now()) @map("created_at")
  updatedAt DateTime                   @updatedAt @map("updated_at")

  @@map("embeddings")
}

model RecoScore {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  titleId   String   @map("title_id")
  title     Title    @relation(fields: [titleId], references: [id], onDelete: Cascade)
  score     Float
  metadata  Json?
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, titleId])
  @@index([userId, score])
  @@map("reco_scores")
}

model Provider {
  id            Int      @id
  name          String
  logoPath      String?  @map("logo_path")
  displayPriority Int    @default(999) @map("display_priority")
  regions       String[]
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("providers")
}

model Genre {
  id        Int      @id
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("genres")
}

model SyncState {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sync_state")
}

